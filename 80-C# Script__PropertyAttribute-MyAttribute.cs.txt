using System;
using System.Collections;
using System.Linq;
using UnityEngine;
using Object = UnityEngine.Object;

#if UNITY_EDITOR
using UnityEditor;
#endif


#ROOTNAMESPACEBEGIN#
#region EDITOR
#if UNITY_EDITOR
[CustomPropertyDrawer(typeof(#SCRIPTNAME#))]
public class #SCRIPTNAME#Drawer : PropertyDrawer
{
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    {
        var Attribute = attribute as #SCRIPTNAME#;
        var target = property.serializedObject.targetObject;

        EditorGUI.BeginChangeCheck();

        EditorGUI.PropertyField(position, property, label);

        if (EditorGUI.EndChangeCheck())
        {
            property.serializedObject.ApplyModifiedProperties();
            EditorUtility.SetDirty(property.serializedObject.targetObject);
        }
    }
    public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
    {
        return EditorGUI.GetPropertyHeight(property, label);
    }
}
#endif
#endregion

public class #SCRIPTNAME# : PropertyAttribute
{
       /// <summary> Describe what this does </summary>
	public #SCRIPTNAME#()
	{

	}
}
#ROOTNAMESPACEEND#